/**
 *
 * The Bipio Dropbox Pod.  save_file action definition
 * ---------------------------------------------------------------
 *  Any file generated by a Bip can be saved to a folder in your Dropbox account
 *  under the Bipio App folder
 * ---------------------------------------------------------------
 *
 * @author Michael Pearson <github@m.bip.io>
 * Copyright (c) 2010-2013 Michael Pearson https://github.com/mjpearson
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */
function SaveFile() {}

SaveFile.prototype = {};

/**
 * Invokes (runs) the action.
 */
SaveFile.prototype.invoke = function(imports, channel, sysImports, contentParts, next) {
    var exports = {}, numFiles = contentParts._files.length, dirPfx = '', self = this,
        $resource = this.$resource,
        log = this.$resource.log;

    log('Invoking ', channel);
    config = channel.getConfig();

    if (config.base_dir) {
        dirPfx = config.base_dir;
    }

    if (imports.base_dir) {
        dirPfx += '/' + imports.base_dir
    }

    dirPfx += '/';

    if (contentParts._files && numFiles > 0) {
        var client = this.pod.getClient(sysImports);

        for (var i = 0; i < numFiles; i++) {
            file = contentParts._files[i];

            // search for file in remote, skip if exists
            client.findByName(dirPfx, file.name, (function(fileContext, contentParts) {
                var self = client;
                return function(err, stats) {
                    if (err) {
                        log(err, channel, 'error');
                        next(err, {});
                    } else {
                        var numFiles = stats.length, found = false;
                        for (var i = 0; i <  numFiles; i++) {
                            found = fileContext.name == stats[i].name;
                            if (found) {
                                next(err, stats[i], contentParts);
                                break;
                            }
                        }

                        // skip if found
                        if (!found || app.helper.isTrue(channel.config.overwrite)) {

                            $resource.file.get(fileContext, function(err, fileStruct, readStream) {
                                var buffers = [];
                                readStream.on('data', function(chunk) {
                                    buffers.push(chunk);
                                });

                                readStream.on('error', function(err) {
                                    next(err);
                                });

                                fileStruct.pathed = dirPfx + file.name;

                                readStream.on('end', function() {
                                    var b = Buffer.concat(buffers);
                                    log('writing ' + b.length + ' bytes ' + fileStruct.pathed, channel, sysImports);
                                    self.writeFile(fileStruct.pathed, b, function(error, stat)  {
                                        if (error) {
                                            log(error, channel, sysImports, 'error');
                                        } else {
                                            log('Wrote ' + stat.path, channel, sysImports);
                                        }
                                        next(error, stat, contentParts);
                                    });
                                });
                            });
                        }
                    }
                }
            })(file, contentParts));
        }
    }
}

// -----------------------------------------------------------------------------
module.exports = SaveFile;